# This is a basic workflow to help you get started with Actions

name: PullNewRelease

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  schedule:
    - cron: '*/30 * * * *'  # Runs every 30 minutes

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
permissions:
  contents: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  release_check:
    name: release_checker
    runs-on: ubuntu-latest
    outputs:
      NEXT_STEP: ${{ steps.get_latest_release.outputs.result }}
      GH_TAG_NAME: ${{ steps.get_latest_release.outputs.GH_TAG_NAME }}
      GH_HTML_URL: ${{ steps.get_latest_release.outputs.GH_HTML_URL }}
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.API_TOKEN }}
          sparse-checkout: |
            .github
            
      - name: check if a new release exists 
        id: get_latest_release
        env:
          TARGET_REPO: "ALPHA-Charlott/azure-monitor-baseline-alerts"  # Replace with the public repo owner and name
        run: |
          # set -x
          function is_within_branches() {
            git ls-remote --exit-code --heads origin $1 >/dev/null
            EXIT_CODE=$?
          
            if [[ $EXIT_CODE == '0' ]]; then
          	  echo 0
            else
          	  echo 1
            fi
          }
          
          function get_latest_release() {
            local response=$(curl -s -L -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.API_TOKEN }}" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/${TARGET_REPO}/releases/latest)
            echo "$response" > response.json
          
            GH_TAG_NAME=$(jq -r '.tag_name' response.json)
            GH_HTML_URL=$(jq -r '.html_url' response.json)
            # echo $GH_TAG_NAME, ">>", $GH_HTML_URL
            echo "GH_TAG_NAME=${GH_TAG_NAME}" >> $GITHUB_OUTPUT
            echo "GH_HTML_URL=${GH_HTML_URL}" >> $GITHUB_OUTPUT
            echo $GH_TAG_NAME
          }
          
          latest=$(get_latest_release)
          match=$(is_within_branches REL-$latest)
          
          if [[ $match == '0' ]]; then
            echo "result=skipped" >> $GITHUB_OUTPUT
            echo "result=skipped"
          else
            echo "result=continue" >> $GITHUB_OUTPUT
            echo "result=continue"
          fi
          
  # This workflow contains a few steps "submit Issue and PR"
  submit_pr:
    needs: [release_check]
    # if: |
    #   needs.release_check.outputs.NEXT_STEP == 'continue'
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
      - name: import variables from previous context
        id: import_variables
        run: |
          echo "${{ needs.release_check.outputs.NEXT_STEP }}"
          echo "${{ needs.release_check.outputs.GH_TAG_NAME }}"
          echo "${{ needs.release_check.outputs.GH_HTML_URL }}"
          echo "GH_TAG_NAME=${{ needs.release_check.outputs.GH_TAG_NAME }}" >> $GITHUB_OUTPUT
          echo "GH_HTML_URL=${{ needs.release_check.outputs.GH_HTML_URL }}" >> $GITHUB_OUTPUT
          
      - name: Checkout current repo
        uses: actions/checkout@v4
        with:
          repository: ALPHA-Charlott/repo
          token: ${{ secrets.API_TOKEN }}
      - name: debug variables
        id: parse_field
        run: |
          echo ${{ steps.import_variables.outputs.GH_HTML_URL }}
          echo ${{ steps.import_variables.outputs.GH_TAG_NAME }}
      - name: creating issues for track the merge request discussion
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ secrets.API_TOKEN }}
          title: |
             New release ${{ steps.import_variables.outputs.GH_TAG_NAME }} just arrives
            # Auto-assign person who triggered the failure.
          assignees: ${{ github.actor }},${{ github.triggering_actor }}
          labels: RELEASE_SYNC
          body: |
            ## Merging new release into local repository
            ${{ steps.import_variables.outputs.GH_TAG_NAME }}
            ${{ steps.import_variables.outputs.GH_HTML_URL }}
      - name: Create a new branch with new tag from remote upstream repo 
        run: |
          git remote add upstream https://github.com/ALPHA-Charlott/azure-monitor-baseline-alerts.git
          git fetch --tags upstream
          # prepare a fresh new branch for Pull Request
          git checkout ${{ steps.import_variables.outputs.GH_TAG_NAME }} -b REL-${{ steps.import_variables.outputs.GH_TAG_NAME }}
          git remote -v
          git branch -vv
          echo ":remote ============"
          git branch -r
      - name: Push new branch to remote using github-push-action
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.API_TOKEN }}
          branch: REL-${{ steps.import_variables.outputs.GH_TAG_NAME }}
      - name: Create Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.API_TOKEN }}
          GH_TAG_NAME: ${{ steps.import_variables.outputs.GH_TAG_NAME }}
          TARGET_REPO: "ALPHA-Charlott/repo"  # Replace with the public repo owner and name
        run: |
          gh repo set-default ${TARGET_REPO}
          gh pr list
          gh pr create -B main -H REL-${{ steps.import_variables.outputs.GH_TAG_NAME }} --title "Merge new release ${GH_TAG_NAME}" --body 'This pull request import releases from trusted sources.'

      ##
      # - name: checkout latest release(tag)
      #   uses: actions/checkout@v4
      #   with:
      #     repository: ${{ vars.REMOTE_REPO }}
      #     ref: "refs/tags/${{ steps.get_latest_release.outputs.GH_TAG_NAME }}"

